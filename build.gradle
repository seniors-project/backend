plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.7'
	id 'io.spring.dependency-management' version '1.1.0'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.side'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

ext {
	snippetsDir = file('build/generated-snippets')
	queryDslVersion = "5.0.0"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.json:json:20220320'

	implementation 'org.projectlombok:lombok'
	annotationProcessor('org.projectlombok:lombok')
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	implementation 'com.querydsl:querydsl-core:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final")

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	outputs.dir snippetsDir
}

bootJar {
	enabled = true
}

jar {
	enabled = false
}

def querydslDir = "$buildDir/generated/sources/annotationProcessor/java/main"
def generated = "src/main/generated"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
	options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main") // Querydsl 클래스들이 생성되는 경로 지정

	source "$buildDir/generated/sources/annotationProcessor/java/main" // 소스 세트에 경로 추가
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(generated)
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

tasks.withType(AbstractCompile) {
	options.with {
		fork = true
	}
}
clean {
	delete file(querydslDir)
	delete file("src/main/generated")
}